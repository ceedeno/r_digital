<div class="container-with-margin">


  <p>
    <strong>Title:</strong>
    <%= @article.title %>
  </p>

  <p>
    <strong>Abstract:</strong>
    <%= @article.abstract %>
  </p>

  <p>
    <strong>Author:</strong>
    <%= @article.author %>
  </p>

  <p>
    <strong>Status:</strong>
    <%= @article.status %>
  </p>

  <p>
    <strong>File:</strong>
    <%= link_to 'Ver en el Navegador', @article&.file&.url %>
    <%#= link_to 'Ver en el Navegador', @article&.file&.remote_url %>

  </p>

  <p>
    <strong>User:</strong>
    <%= @article&.user&.first_name %>
  </p>


  <iframe src='/web/viewer.html?file=<%= @article&.file&.remote_url %>' class="article-pdf-viewer"></iframe>


  <hr>

  <%= link_to 'Edit', edit_article_path(@article) %> |
  <%= link_to 'Back', articles_path %>


</div>


<% if false %>

    <canvas id="the-canvas"></canvas>


    <%= javascript_include_tag '/pdf.js' %>


    <script type="text/javascript">

        PDFJS.workerSrc = "/pdf.worker.js";


        var url = '<%= @article&.file&.url %>';

        // Asynchronous download PDF
        PDFJS.getDocument(url)
            .then(function (pdf) {
                return pdf.getPage(1);
            })
            .then(function (page) {
// Set scale (zoom) level
                var scale = 1.5;

// Get viewport (dimensions)
                var viewport = page.getViewport(scale);

// Get canvas#the-canvas
                var canvas = document.getElementById('the-canvas');

// Fetch canvas' 2d context
                var context = canvas.getContext('2d');

// Set dimensions to Canvas
                canvas.height = viewport.height;
                canvas.width = viewport.width;

// Prepare object needed by render method
                var renderContext = {
                    canvasContext: context,
                    viewport: viewport
                };

// Render PDF page
                page.render(renderContext);
            });
    </script>

<% end %>